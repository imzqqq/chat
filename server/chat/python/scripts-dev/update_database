#!/usr/bin/env python

import argparse
import logging
import sys

import yaml

from twisted.internet import defer, reactor

import chat
from chat.config.homeserver import HomeServerConfig
from chat.metrics.background_process_metrics import run_as_background_process
from chat.server import HomeServer
from chat.storage import DataStore
from chat.util.versionstring import get_version_string

logger = logging.getLogger("update_database")


class MockHomeserver(HomeServer):
    DATASTORE_CLASS = DataStore

    def __init__(self, config, **kwargs):
        super(MockHomeserver, self).__init__(
            config.server_name, reactor=reactor, config=config, **kwargs
        )

		### MARK - TODO:
        self.version_string = "Chat/" + get_version_string(chat)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=(
            "Updates a Chat server database to the latest schema and runs background updates"
            " on it."
        )
    )
    parser.add_argument("-v", action="store_true")
    parser.add_argument(
        "--database-config",
        type=argparse.FileType("r"),
        required=True,
        help="A database config file for either a SQLite3 database or a PostgreSQL one.",
    )

    args = parser.parse_args()

    logging_config = {
        "level": logging.DEBUG if args.v else logging.INFO,
        "format": "%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(message)s",
    }

    logging.basicConfig(**logging_config)

    # Load, process and sanity-check the config.
    hs_config = yaml.safe_load(args.database_config)

    if "database" not in hs_config:
        sys.stderr.write("The configuration file must have a 'database' section.\n")
        sys.exit(4)

    config = HomeServerConfig()
    config.parse_config_dict(hs_config, "", "")

    # Instantiate and initialise the homeserver object.
    hs = MockHomeserver(config)

    # Setup instantiates the store within the homeserver object and updates the
    # DB.
    hs.setup()
    store = hs.get_datastore()

    async def run_background_updates():
        await store.db_pool.updates.run_background_updates(sleep=False)
        # Stop the reactor to exit the script once every background update is run.
        reactor.stop()

    def run():
        # Apply all background updates on the database.
        defer.ensureDeferred(
            run_as_background_process("background_updates", run_background_updates)
        )

    reactor.callWhenRunning(run)

    reactor.run()

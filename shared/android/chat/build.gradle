import com.android.build.OutputFile

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'placeholder-resolver'
apply plugin: 'dagger.hilt.android.plugin'

kapt {
    correctErrorTypes = true
}

// Note: 2 digits max for each value
ext.versionMajor = 1
ext.versionMinor = 3
ext.versionPatch = 8

ext.scVersion = 46

static def getGitTimestamp() {
    def cmd = 'git show -s --format=%ct'
    return cmd.execute().text.trim() as Long
}

static def generateVersionCodeFromTimestamp() {
    // It's unix timestamp, minus timestamp of October 3rd 2018 (first commit date) divided by 100: It's incremented by one every 100 seconds.
    // plus 20_000_000 for compatibility reason with the previous way the Version Code was computed
    // Note that the result will be multiplied by 10 when adding the digit for the arch
    return ((getGitTimestamp() - 1_538_524_800) / 100).toInteger() + 20_000_000
}

def generateVersionCodeFromVersionName() {
    // plus 4_000_000 for compatibility reason with the previous way the Version Code was computed
    // Note that the result will be multiplied by 10 when adding the digit for the arch
    return (versionMajor * 1_00_00 + versionMinor * 1_00 + versionPatch + scVersion) + 4_000_000
}

def getVersionCode() {
    if (gitBranchName() == "develop") {
        return generateVersionCodeFromTimestamp()
    } else {
        return generateVersionCodeFromVersionName()
    }
}

static def gitRevision() {
    def cmd = "git rev-parse --short=8 HEAD"
    return cmd.execute().text.trim()
}

static def gitRevisionDate() {
    def cmd = "git show -s --format=%ci HEAD^{commit}"
    return cmd.execute().text.trim()
}

static def gitBranchName() {
    def fromEnv = System.env.BUILDKITE_BRANCH as String ?: ""

    if (!fromEnv.isEmpty()) {
        return fromEnv
    } else {
        // Note: this command return "HEAD" on Buildkite, so use the system env 'BUILDKITE_BRANCH' content first
        def cmd = "git rev-parse --abbrev-ref HEAD"
        return cmd.execute().text.trim()
    }
}

// For Google Play build, build on any other branch than main will have a "-dev" suffix
static def getGplayVersionSuffix() {
    if (gitBranchName() == "main" || true) {
        return ""
    } else {
        return "-dev"
    }
}

static def gitTag() {
    def cmd = "git describe --exact-match --tags"
    return cmd.execute().text.trim()
}

// For F-Droid build, build on a not tagged commit will have a "-dev" suffix
static def getFdroidVersionSuffix() {
    if (gitTag() == "") {
        return "-dev"
    } else {
        return ""
    }
}

project.android.buildTypes.all { buildType ->
    buildType.javaCompileOptions.annotationProcessorOptions.arguments =
            [
                    validateEpoxyModelUsage: String.valueOf(buildType.name == 'debug')
            ]
}

// map for the version codes last digit
// x86 must have greater values than arm
// 64 bits have greater value than 32 bits
ext.abiVersionCodes = ["armeabi-v7a": 1, "arm64-v8a": 2, "x86": 3, "x86_64": 4].withDefault { 0 }

def buildNumber = System.env.BUILDKITE_BUILD_NUMBER as Integer ?: 0

android {
    compileSdk versions.compileSdk

    // Due to a bug introduced in Android gradle plugin 3.6.0, we have to specify the ndk version to use
    // Ref: https://issuetracker.google.com/issues/144111441
    ndkVersion "21.3.6528147"

    defaultConfig {
        applicationId "com.imzqqq.app"
        // Set to API 21: see #405
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        multiDexEnabled true

        renderscriptTargetApi 24
        renderscriptSupportModeEnabled true

        // `develop` branch will have version code from timestamp, to ensure each build from CI has a incremented versionCode.
        // Other branches (main, features, etc.) will have version code based on application version.
        versionCode 40100700

        // Required for sonar analysis
        versionName "1.3.6"
        
         /// MARK - imzqqq
        vectorDrawables.useSupportLibrary = true
        resValue "string", "app_flow_name", "Chat"
        buildConfigField("String", 'VERSION_NAME', "\"$versionName\"")
        buildConfigField("String", 'FLAVOR', "\"green\"")
        buildConfigField("String", "CUSTOM_LOGO_URL", "\"\"")
        buildConfigField("String", "CUSTOM_INSTANCE", "\"\"")
        buildConfigField("String", "SUPPORT_ACCOUNT_URL", "\"https://flow.imzqqq.top/@imzqqq\"")
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
        /// END

        buildConfigField "String", "GIT_REVISION", "\"${gitRevision()}\""
        resValue "string", "git_revision", "\"${gitRevision()}\""

        buildConfigField "String", "GIT_REVISION_DATE", "\"${gitRevisionDate()}\""
        resValue "string", "git_revision_date", "\"${gitRevisionDate()}\""

        buildConfigField "String", "GIT_BRANCH_NAME", "\"${gitBranchName()}\""
        resValue "string", "git_branch_name", "\"${gitBranchName()}\""

        buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
        resValue "string", "build_number", "\"${buildNumber}\""

        // The two booleans must not have the same value. We need two values for the manifest
        // LoginFlowV2 is disabled to be merged on develop (changelog: Improve login/register flow (#1410, #2585, #3172))
        resValue "bool", "useLoginV1", "true"
        resValue "bool", "useLoginV2", "false"

        // NotificationSettingsV2 is disabled. To be released in conjunction with iOS/Web
        def useNotificationSettingsV2 = true
        buildConfigField "Boolean", "USE_NOTIFICATION_SETTINGS_V2", "${useNotificationSettingsV2}"
        resValue "bool", "useNotificationSettingsV1", "${!useNotificationSettingsV2}"
        resValue "bool", "useNotificationSettingsV2", "${useNotificationSettingsV2}"

        buildConfigField "com.imzqqq.app.features.crypto.keysrequest.OutboundSessionKeySharingStrategy", "outboundSessionKeySharingStrategy", "com.imzqqq.app.features.crypto.keysrequest.OutboundSessionKeySharingStrategy.WhenTyping"

        buildConfigField "Long", "VOICE_MESSAGE_DURATION_LIMIT_MS", "120_000L"

        //  If set, MSC3086 asserted identity messages sent on VoIP calls will cause the call to appear in the room corresponding to the asserted identity.
        //  This *must* only be set in trusted environments.
        buildConfigField "Boolean", "handleCallAssertedIdentityEvents", "false"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Keep abiFilter for the universalApk
        ndk {
            /// MARK - imzqqq, uncomment this when releasing
            //abiFilters "armeabi-v7a", "x86", 'arm64-v8a', 'x86_64'
            abiFilters "x86_64"
            /// END
        }

        // Ref: https://developer.android.com/studio/build/configure-apk-splits.html
        splits {
            // Configures multiple APKs based on ABI.
            abi {
                // Enables building multiple APKs per ABI.
                enable true

                // By default all ABIs are included, so use reset() and include to specify that we only
                // want APKs for armeabi-v7a, x86, arm64-v8a and x86_64.

                // Resets the list of ABIs that Gradle should create APKs for to none.
                reset()

                // Specifies a list of ABIs that Gradle should create APKs for.
                /// MARK - imzqqq, uncomment this when releasing
                //include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
                include "x86_64"
                /// END

                // Generate a universal APK that includes all ABIs, so user who install from CI tool can use this one by default.
                universalApk true
            }
        }

        /* MARK - imzqqq
        applicationVariants.all { variant ->
            // assign different version code for each output
            def baseVariantVersion = variant.versionCode * 10
            variant.outputs.each { output ->
                def baseAbiVersionCode = project.ext.abiVersionCodes.get(output.getFilter(OutputFile.ABI))
                // Known limitation: it does not modify the value in the BuildConfig.java generated file
                // See https://issuetracker.google.com/issues/171133218
                output.versionCodeOverride = baseVariantVersion + baseAbiVersionCode
                print "ABI " + output.getFilter(OutputFile.ABI) + " \t-> VersionCode = " + output.versionCodeOverride + "\n"
            }
        }*/

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        // Disables animations during instrumented tests you run from the command line…
        // This property does not affect tests that you run using Android Studio.”
        animationsDisabled = true

        // Comment to run on Android 12
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        
        /// MARK - imzqqq
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        /// END
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('./signature/debug.keystore')
            storePassword 'android'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "chat-dev"

            resValue "bool", "debug_mode", "true"
            buildConfigField "boolean", "LOW_PRIVACY_LOG_ENABLE", "false"
            // Set to true if you want to enable strict mode in debug
            buildConfigField "boolean", "ENABLE_STRICT_MODE_LOGS", "false"

            signingConfig signingConfigs.debug
        }

        release {
            resValue "string", "app_name", "Chat"

            resValue "bool", "debug_mode", "false"
            buildConfigField "boolean", "LOW_PRIVACY_LOG_ENABLE", "false"
            buildConfigField "boolean", "ENABLE_STRICT_MODE_LOGS", "false"

            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                // We do not activate obfuscation as it makes it hard then to read crash reports, and it's a bit useless on an open source project :)
                obfuscate false
                optimizeCode true
                proguardFiles 'proguard-rules.pro'
            }
        }
    }

    flavorDimensions "store"

    productFlavors {
        gplay {
            apply plugin: 'com.google.gms.google-services'
            afterEvaluate {
                tasks.matching { it.name.contains("GoogleServices") && !it.name.contains("Gplay") }*.enabled = false
            }

            dimension "store"
            isDefault = true

            versionName "1.3.6"

            resValue "bool", "isGplay", "true"
            buildConfigField "boolean", "ALLOW_FCM_USE", "true"
            buildConfigField "boolean", "ALLOW_EXTERNAL_UNIFIEDPUSH_DISTRIB", "true"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"G\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"GooglePlay\""
        }

        /* MARK - imzqqq, uncomment this when releasing
        fdroid {
            dimension "store"

            versionName "1.3.6"

            resValue "bool", "isGplay", "false"
            buildConfigField "boolean", "ALLOW_FCM_USE", "false"
            buildConfigField "boolean", "ALLOW_EXTERNAL_UNIFIEDPUSH_DISTRIB", "true"
            buildConfigField "String", "SHORT_FLAVOR_DESCRIPTION", "\"F\""
            buildConfigField "String", "FLAVOR_DESCRIPTION", "\"FDroid\""
        }*/
    }

    lintOptions {
        lintConfig file("lint.xml")

        checkDependencies true
        /// MARK - imzqqq
        abortOnError true
        ignoreWarnings true
        /// END
    }

    compileOptions {
        sourceCompatibility versions.sourceCompat
        targetCompatibility versions.targetCompat
    }

    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn",
                // Fixes false positive "This is an internal Mavericks API. It is not intended for external use."
                // of MvRx `by viewModel()` calls. Maybe due to the inlining of code... This is a temporary fix...
                "-Xopt-in=com.airbnb.mvrx.InternalMavericksApi",
                // Opt in for kotlinx.coroutines.FlowPreview too
                "-Xopt-in=kotlinx.coroutines.FlowPreview",
                // Opt in for kotlinx.coroutines.ExperimentalCoroutinesApi too
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
        ]
    }

    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
        }
        /// MARK - imzqqq
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        /// END
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude 'META-INF/lib_release.kotlin_module'
    	/// MARK - imzqqq
        // Exclude unneeded files added by libraries
        exclude 'LICENSE_OFL'
        exclude 'LICENSE_UNICODE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
		/// END
    }
    buildToolsVersion '31.0.0'

    /// MARK - imzqqq
    //bundle {
    //    language {
    //        // bundle all languages in every apk so the dynamic language switching works
    //        enableSplit = false
    //    }
    //}
    /// END
}

configurations {
    // videocache includes a sl4j logger which causes mockk to attempt to call the static android Log
    testImplementation.exclude group: 'org.slf4j', module: 'slf4j-android'
}

dependencies {

    implementation project(":matrix-sdk-android")
    implementation project(":matrix-sdk-android-flow")
    implementation project(":diff-match-patch")
    implementation project(":multipicker")
    implementation project(":attachment-viewer")
    implementation project(":library:ui-styles")
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.31"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"

    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.constraintlayout:constraintlayout:2.1.1"
    implementation "androidx.sharetarget:sharetarget:1.1.0"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.media:media:1.4.3"
    implementation "androidx.transition:transition:1.4.1"

    implementation "org.threeten:threetenbp:1.4.0:no-tzdb"
    implementation "com.gabrielittner.threetenbp:lazythreetenbp:0.9.0"

    implementation "com.squareup.moshi:moshi-adapters:1.12.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.12.0"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.12.0"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-process:2.4.0"

    implementation "androidx.datastore:datastore:1.0.0"
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Log
    implementation "com.jakewharton.timber:timber:5.0.1"

    // Debug
    implementation 'com.facebook.stetho:stetho:1.6.0'

    // Phone number https://github.com/google/libphonenumber
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.12.37'

    // FlowBinding
    implementation "io.github.reactivecircus.flowbinding:flowbinding-android:1.2.0"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-appcompat:1.2.0"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-material:1.2.0"

    implementation "com.airbnb.android:epoxy:4.6.3"
    implementation "com.airbnb.android:epoxy-glide-preloading:4.6.3"
    kapt "com.airbnb.android:epoxy-processor:4.6.3"

    /// MARK - imzqqq, TODO: use expoxyPaging3, using local modified deps now
    //"com.airbnb.android:epoxy-paging:4.6.3"
    implementation project(":library:epoxy-paging")
    /// END

    implementation "com.airbnb.android:mavericks:2.5.1"

    // Work
    implementation "androidx.work:work-runtime-ktx:2.7.0"

    // Paging
    /// MARK - imzqqq, FIXME: Update to latest version will cause breaks
    // TODO: migrate paging2 to paging3
    implementation "androidx.paging:paging-runtime-ktx:2.1.2"
    // Version 3 is used by module: flow
    implementation "androidx.paging:paging-runtime-ktx:3.1.0"
    /// END

    // Functional Programming
    implementation "io.arrow-kt:arrow-core:0.8.2"

    // Pref
    implementation "androidx.preference:preference-ktx:1.1.1"

    // UI
    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    implementation "com.google.android.material:material:1.4.0"
    implementation 'me.gujun.android:span:1.7'
    implementation "io.noties.markwon:core:4.6.2"
    implementation "io.noties.markwon:html:4.6.2"
    implementation 'com.googlecode.htmlcompressor:htmlcompressor:1.5.2'
    implementation 'me.saket:better-link-movement-method:2.2.0'
    implementation 'com.google.android:flexbox:2.0.1'
    implementation "androidx.autofill:autofill:1.1.0"
    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    implementation 'com.github.vector-im:PFLockScreen-Android:1.0.0-beta12'
    implementation 'com.github.hyuwah:DraggableView:1.0.0'
    implementation 'com.github.Armen101:AudioRecordView:1.0.5'

    // Custom Tab
    implementation 'androidx.browser:browser:1.4.0'

    // Passphrase strength helper
    implementation 'com.nulab-inc:zxcvbn:1.5.2'

    // To convert voice message on old platforms
    implementation 'com.arthenica:ffmpeg-kit-audio:4.5.LTS'

    // Alerter
    implementation 'com.tapadoo.android:alerter:7.0.1'

    implementation 'com.otaliastudios:autocomplete:1.1.0'

    // Shake detection
    implementation 'com.squareup:seismic:1.0.3'

    // Image Loading
    implementation "com.github.piasy:BigImageViewer:1.8.1"
    implementation "com.github.piasy:GlideImageLoader:1.8.1"
    implementation "com.github.piasy:ProgressPieIndicator:1.8.1"
    implementation "com.github.piasy:GlideImageViewFactory:1.8.1"

    // implementation 'com.github.MikeOrtiz:TouchImageView:3.0.2'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation "com.github.bumptech.glide:glide:4.12.0"
    kapt "com.github.bumptech.glide:compiler:4.12.0"
    implementation 'com.danikula:videocache:2.7.1'
    implementation 'com.github.yalantis:ucrop:2.2.7'

    // Badge for compatibility
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'

    // Chat effects
    implementation 'nl.dionsegijn:konfetti:1.3.2'
    implementation 'com.github.jetradarmobile:android-snowfall:1.2.1'
    // DI
    implementation "com.google.dagger:hilt-android:2.40.5"
    kapt "com.google.dagger:hilt-compiler:2.40.5"

    // UnifiedPush
    implementation 'com.github.UnifiedPush:android-connector:1.2.3'
    // UnifiedPush gplay flavor only
    gplayImplementation('com.github.UnifiedPush:android-embedded_fcm_distributor:1.1.4') {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    // OSS License, gplay flavor only
    gplayImplementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    implementation "androidx.emoji:emoji-appcompat:1.1.0"
    implementation('com.github.BillCarsonFr:JsonViewer:0.7')

    // WebRTC
    // org.webrtc:google-webrtc is for development purposes only
    // implementation 'org.webrtc:google-webrtc:1.0.+'
    implementation('com.facebook.react:react-native-webrtc:1.87.3-jitsi-6624067@aar')

    // Jitsi
    implementation('org.jitsi.react:jitsi-meet-sdk:3.1.0') {
        exclude group: 'com.google.firebase'
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.installreferrer'
    }

    // QR-code
    // Stick to 3.3.3 because of https://github.com/zxing/zxing/issues/1170
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'me.dm7.barcodescanner:zxing:1.9.13'

    // Emoji Keyboard
    implementation "com.vanniktech:emoji-material:0.8.0"
    implementation "com.vanniktech:emoji-google:0.8.0"

    implementation 'im.dlg:android-dialer:1.2.5'

    // JWT
    api "io.jsonwebtoken:jjwt-api:0.11.2"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
    runtimeOnly("io.jsonwebtoken:jjwt-orgjson:0.11.2") {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }
    implementation 'commons-codec:commons-codec:1.15'

    // TESTS
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.amshove.kluent:kluent-android:1.68"
    testImplementation "io.mockk:mockk:1.12.1"
    // Plant Timber tree for test
    testImplementation "net.lachlanmckee:timber-junit-rule:1.0.1"
    testImplementation "com.airbnb.android:mavericks-testing:2.5.1"
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2") {
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }

    // Activate when you want to check for leaks, from time to time.
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'

    androidTestImplementation "androidx.test:core:1.4.0"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.4.0"
    androidTestImplementation "org.amshove.kluent:kluent-android:1.68"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2") {
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    // Plant Timber tree for test
    androidTestImplementation "net.lachlanmckee:timber-junit-rule:1.0.1"
    // "The one who serves a great Espresso"
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestUtil "androidx.test:orchestrator:1.4.0"

    /// MARK - imzqqq, flow deps
    implementation "com.uber.autodispose2:autodispose-androidx-lifecycle:2.0.0"
    implementation "com.uber.autodispose2:autodispose:2.0.0"
    implementation "org.conscrypt:conscrypt-android:2.5.2"
    implementation "de.c1710:filemojicompat:1.0.18"
    implementation "androidx.room:room-ktx:2.3.0"
    implementation "androidx.room:room-rxjava3:2.3.0"
    kapt "androidx.room:room-compiler:2.3.0"
    androidTestImplementation "androidx.room:room-testing:2.3.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.retrofit2:adapter-rxjava3:2.9.0"
    implementation "io.reactivex.rxjava3:rxjava:3.0.12"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation "com.squareup.okhttp3:okhttp:5.0.0-alpha.2"
    implementation "com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-rx3:1.5.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.exifinterface:exifinterface:1.3.3"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.emoji:emoji:1.1.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.4.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.work:work-runtime:2.7.1"
    implementation "com.github.bumptech.glide:okhttp3-integration:4.12.0"
    implementation "com.github.connyduck:sparkbutton:4.1.0"
    implementation "com.github.chrisbanes:PhotoView:2.3.0"
    implementation "com.mikepenz:materialdrawer:8.4.1"
    implementation "com.mikepenz:materialdrawer-iconics:8.4.1"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.4.original-kotlin@aar'
    implementation "com.github.CanHub:Android-Image-Cropper:3.1.0"
    testImplementation "org.robolectric:robolectric:4.5.1"
    testImplementation "org.mockito:mockito-inline:3.6.28"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    // TODO: update to 7.0.4
    implementation 'com.android.databinding:viewbinding:4.0.1'
    /// END
}
